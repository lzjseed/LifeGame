#pragma kernel CSSimulation

RWStructuredBuffer<uint4> _PRNGStates;

inline float cbrt(float d)
{
	return pow(d, 1.0f / 3.0f);
}

uint TausStep(inout uint z, int S1, int S2, int S3, uint M)
{
	uint b = (((z << S1) ^ z) >> S2);
	return z = (((z & M) << S3) ^ b);
}

uint LCGStep(inout uint z)
{
	return z = (1664525 * z + 1013904223);
}

float GetRandomValueTauswortheUniform(inout uint4 states)
{
	uint taus = TausStep(states.x, 13, 19, 12, 4294967294UL) ^ TausStep(states.y, 2, 25, 4, 4294967288UL) ^ TausStep(states.z, 3, 11, 17, 4294967280UL);
	uint lcg = LCGStep(states.w);

	return 2.3283064365387e-10f * (taus ^ lcg); // taus+
}

float GetRandomValue(inout uint4 states)
{
	float rand = GetRandomValueTauswortheUniform(states);
	return rand;
}

RWTexture2D<float> _Buffer0;
RWTexture2D<float> _Buffer1;
int _OutputTargetSize;
int _IsFistFrame;
float _InitLifeProb;

[numthreads(32, 32,1)]
void CSSimulation(uint3 id : SV_DispatchThreadID)
{
	int2 pos = id.xy;

	float life = _Buffer0[pos];

	int2 offset[8] =
	{
		int2(-1,0),
		int2(1,0),
		int2(0,-1),
		int2(0, 1),
		int2(-1,-1),
		int2(1,-1),
		int2(-1, 1),
		int2(1, 1)
	};

	int lifeNum = 0;
	for (int i = 0; i < 8; i++)
	{
		lifeNum += _Buffer0[offset[i] + pos] > 0.5 ? 1.0 : 0.0;
	}

	_Buffer1[pos] = life > 0.5f ? ((lifeNum < 2 || lifeNum > 3) ? 0.0 : life) : ((lifeNum == 3) ? 1.0 : life);
	
	if (_IsFistFrame)
	{
		const uint PRNGIndex = id.y * _OutputTargetSize + id.x;

		uint4 PRNGStates = _PRNGStates[PRNGIndex];

		float value = GetRandomValue(PRNGStates);

		_Buffer1[pos] = value > _InitLifeProb ? 1.0 : 0.0;

		_PRNGStates[PRNGIndex] = PRNGStates;
	}

	DeviceMemoryBarrier();
	
	_Buffer0[pos] = _Buffer1[pos];
}
